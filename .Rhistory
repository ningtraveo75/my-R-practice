}
}
gpa_fun("92aS67fee") # 顯示82.85276
gpa_fun("aa829838s") # 查無此學號
library(readr)
transcriptDataFinal <- read_csv("https://raw.githubusercontent.com/tpemartin/github-data/master/transcriptDataFinal.csv")
gpa_fun <- function(studentID){
if(studentID %in% transcriptDataFinal$學號){
transcriptDataFinal$學號==studentID -> logiChosenStudent
subSample <- transcriptDataFinal[logiChosenStudent,]
sum(subSample$學期成績*subSample$學分數)/
sum(subSample$學分數) -> GPA
return(GPA)
} else{
message("查無此學號")
}
}
gpa_fun("92aS67fee") # 顯示82.85276
gpa_fun("aa829838s") # 查無此學號
transcriptDataFinal[transcriptDataFinal$學號 != "92aS67fee",] -> transcriptDataFinal
gpa_fun("92aS67fee") # 顯示82.85276
gpa_fun4 <- function(studentID,transcriptDataFinal){
if(studentID %in% transcriptDataFinal$學號){
transcriptDataFinal$學號==studentID -> logiChosenStudent
subSample <- transcriptDataFinal[logiChosenStudent,]
sum(subSample$學期成績*subSample$學分數)/
sum(subSample$學分數) -> GPA
return(GPA)
} else{
message("查無此學號")
}
}
transcriptDataFinal <- read_csv("https://raw.githubusercontent.com/tpemartin/github-data/master/transcriptDataFinal.csv")
gpa_fun4("92aS67fee",transcriptDataFinal)
knitr::opts_chunk$set(echo = TRUE)
utility_cobb_douglass <- function(x,y,.alpha,.beta){
utilValue <- x^.alpha*y^.beta # 程序產生output值
return(utilValue) # 傳回output值
}
utility_cobb_douglass(1,2,0.5,0.8)
utility_cobb_douglass(1,2,.beta=0.8,.alpha=0.5)
utility_cobb_douglass(1,2,0.5,0.8)
utility_cobb_douglass(1,2,.beta=0.8,.alpha=0.5)
utility_cobb_douglass(1,.beta=0.8,2,0.5)
utility_cobb_douglass(1,.beta=0.8,.alpha=0.5,2)
utility_cobb_douglass(1,2,0.5,0.8)
utility_cobb_douglass(1,2,.beta=0.8,.alpha=0.5)
utility_cobb_douglass(1,.beta=0.8,2,0.5)
utility_cobb_douglass(1,.beta=0.8,.alpha=0.5,2)
utility_cobb_douglass(.alpha=0.5,.beta=0.8,y=2,x=1)
load(url("https://www.dropbox.com/s/duh5aaqgl2f5m3z/loopTranscriptData.Rda?raw=1"))
# 以前5筆學號為sequence_source
studentIds5 <- studentIds[1:5] # 前5筆學號
studentIds <- unique(transcriptDataFinal$學號) # 全部可能學號
# 以前5筆學號為sequence_source
studentIds5 <- studentIds[1:5] # 前5筆學號
studentIds5
for(i in studentIds5){
print(i) # 印出studentIds5[[i]]
}
gpa_fun(studentIds5[[1]])
for(i in studentIds5){
print(i)
print(gpa_fun(i))
}
for(i in studentIds5){
print(i) # 印出studentIds5[[i]]
}
gpa_fun(studentIds5[[1]])
for(i in studentIds5){
print(i)
print(gpa_fun(i))
}
c(1:5)
for(i in c(1:5)){
print(i)
}
for(i in c(1:5)){
print(i)
print(studentIds5[[i]])
}
gpa_fun(studentIds5[[i]])
for(i in studentIds5){
print(i)
print(gpa_fun(i))
}
gpa_fun(studentIds5[[1]])
for(i in studentIds5){
print(i)
print(gpa_fun(i))
}
gpa_fun(studentIds5[[1]])
for(i in studentIds5){
print(i)
#print(gpa_fun(i))
}
# 以前5筆學號為sequence_source
studentIds5 <- studentIds[1:5] # 前5筆學號
studentIds5
for(i in studentIds5){
print(i) # 印出studentIds5[[i]]
}
gpa_fun(studentIds5[[1]])
for(i in studentIds5){
print(i)
#print(gpa_fun(i))
}
#gpa_fun(studentIds5[[1]])
for(i in studentIds5){
print(i)
print(gpa_fun(i))
}
gpa_fun()
gpa_fun(studentIds5[[1]])
View(gpa_fun)
gpa_fun(studentIds5[[1]])
for(i in studentIds5){
print(i)
print(gpa_fun(i))
}
seq_along(studentIds5)
for(i in seq_along(studentIds5)){
print(i)
print(studentIds5[[i]])
}
gmailAddress <- c(
"tim@gmail.com",
"anita",
"yellen@gmail.com",
"huang@gmail.com"
)
for(i in gmailAddress){
if(str_detect(gmailAddress,"@gmail.com")){
print(i)
} else {
str_c(gmailAddress,"@gmail.com")
print(i)
}
}
library(stringr)
for(i in gmailAddress){
if(str_detect(gmailAddress,"@gmail.com")){
print(i)
} else {
str_c(gmailAddress,"@gmail.com")
print(i)
}
}
library(stringr)
str_detect(gmailAddress,"@gmail.com")
for(i in gmailAddress){
if(str_detect(gmailAddress,"@gmail.com")){
print(i)
} else {
str_c(gmailAddress,"@gmail.com")
print(i)
}
}
library(stringr)
for(i in gmailAddress){
if(str_detect(gmailAddress,"@gmail.com")){
print(i)
} else {
str_c(gmailAddress,"@gmail.com")
print(i)
}
}
for(i in c(1:4)){
if(str_detect(gmailAddress,"@gmail.com")){
print(i)
} else {
str_c(gmailAddress,"@gmail.com")
print(i)
}
}
for(i in seq_along(gmailAddress)){
if(str_detect(gmailAddress,"@gmail.com")){
print(i)
} else {
str_c(gmailAddress,"@gmail.com")
print(i)
}
}
knitr::opts_chunk$set(echo = TRUE)
load(url("https://www.dropbox.com/s/duh5aaqgl2f5m3z/loopTranscriptData.Rda?raw=1"))
studentIds <- unique(transcriptDataFinal$學號) # 全部可能學號
studentIds5 <- studentIds[1:5] # 前5筆學號
seq_along(studentIds5)
studentIds5
seq_along(studentIds5)
length(studentIds5)
length(studentIds5)
1:length(studentIds5)
i <- 1
print(studentIds5[[i]])
for (i in seq_along(studentIds5)) {
print(studentIds5[[i]])
}
```{r}
library(stringr)
for(i in gmailAddress){
if(str_detect(gmailAddress,"@gmail.com")){
print(gmailAddress[[i]])
} else {
str_c(gmailAddress,"@gmail.com")
print(gmailAddress[[i]])
}
}
gmailAddress <- c(
"tim@gmail.com",
"anita",
"yellen@gmail.com",
"huang@gmail.com"
)
library(stringr)
for(i in gmailAddress){
if(str_detect(gmailAddress,"@gmail.com")){
print(gmailAddress[[i]])
} else {
str_c(gmailAddress,"@gmail.com")
print(gmailAddress[[i]])
}
}
library(stringr)
for(i in gmailAddress){
if(str_detect(gmailAddress,"@gmail.com")){
print(i)
} else {
str_c(gmailAddress,"@gmail.com")
print(i)
}
}
library(stringr)
i<-1
for(i in gmailAddress){
if(str_detect(gmailAddress,"@gmail.com")){
print(gmailAddress[[i]])
} else {
str_c(gmailAddress,"@gmail.com")
print(gmailAddress[[i]])
}
}
i <- 1
if(str_detect(gmailAddress[[i]],"@gmail.com")){
print(gmailAddress[[i]])
} else {
str_c(gmailAddress[[i]],"@gmail.com")
print(gmailAddress[[i]])
}
for (i in seq_along(gmailAddress)) {
if(str_detect(gmailAddress[[i]],"@gmail.com")){
print(gmailAddress[[i]])
} else {
str_c(gmailAddress[[i]],"@gmail.com")
print(gmailAddress[[i]])
}
}
i <- 1
if(str_detect(gmailAddress[[i]],"@gmail.com")){
print(gmailAddress[[i]])
} else {
print(str_c(gmailAddress[[i]],"@gmail.com"))
}
for (i in seq_along(gmailAddress)) {
if(str_detect(gmailAddress[[i]],"@gmail.com")){
print(gmailAddress[[i]])
} else {
str_c(gmailAddress[[i]],"@gmail.com")
print(gmailAddress[[i]])
}
}
for (i in seq_along(gmailAddress)) {
if(str_detect(gmailAddress[[i]],"@gmail.com")){
print(gmailAddress[[i]])
} else {
print(str_c(gmailAddress[[i]],"@gmail.com"))
}
}
i <- 1
if(str_detect(gmailAddress[[i]],"@gmail.com")){
print(gmailAddress[[i]])
} else {
correctAddress <- str_c(gmailAddress[[i]],"@gmail.com")
print(correctAddress)
}
for (i in seq_along(gmailAddress)) {
if(str_detect(gmailAddress[[i]],"@gmail.com")){
print(gmailAddress[[i]])
} else {
correctAddress <- str_c(gmailAddress[[i]],"@gmail.com")
print(correctAddress)
}
}
knitr::opts_chunk$set(echo = TRUE)
library(lubridate); library(stringr); library(purrr); library(readr);
library(lubridate); library(stringr); library(purrr); library(readr);
library(httr)
#commitHistory <- content(GET("https://api.github.com/repos/r-hub/cranlogs/commits"))
load(url("https://www.dropbox.com/s/qnz9paigf61yjus/commitHistory.Rda?raw=1"))
View(commitHistory)
View(commitHistory)
df_commit <- data.frame(
author <- commitHistory[[10]][["commit"]][["author"]][["name"]]
commiter <- commitHistory[[10]][["commit"]][["committer"]][["name"]]
df_commit <- data.frame(
author <- commitHistory[[10]][["commit"]][["author"]][["name"]],
commiter <- commitHistory[[10]][["commit"]][["committer"]][["name"]],
commitDate <- commitHistory[[10]][["commit"]][["committer"]][["date"]],
sha <- commitHistory[[10]][["sha"]],
stringsAsFactors=F
)
df_commit <- data.frame(
author=oneCommitRecord$commit$author$name,
committer=oneCommitRecord$commit$committer$name,
commitDate=oneCommitRecord$commit$committer$date,
sha=oneCommitRecord$sha,
stringsAsFactors = F
)
oneCommitRecord <- commitHistory[[10]]
df_commit <- data.frame(
author=oneCommitRecord$commit$author$name,
committer=oneCommitRecord$commit$committer$name,
commitDate=oneCommitRecord$commit$committer$date,
sha=oneCommitRecord$sha,
stringsAsFactors = F
)
View(df_commit)
View(oneCommitRecord)
commit_df_fun <- function(oneCommitRecord){
df_commit <- data.frame(
author=oneCommitRecord$commit$author$name,
committer=oneCommitRecord$commit$committer$name,
commitDate=oneCommitRecord$commit$committer$date,
sha=oneCommitRecord$sha,
stringsAsFactors = F
)
return(df_commit)
}
commit_df_fun
library(purrr)
map_dfr(commitHistory,commit_df_fun) -> df_allCommits
library(purrr)
map_dfr(commitHistory,commit_df_fun) -> df_allCommits
library(purrr)
map_dfr(commitHistory,commit_df_fun) -> df_allCommits
df_allCommits
library(purrr)
map_dfr(commitHistory,commit_df_fun) -> df_allCommits
df_allCommits
View(df_allCommits)
df_allCommits$samePerson <- author==committer
commit_df_fun <- function(oneCommitRecord){
df_commit <- data.frame(
author=oneCommitRecord$commit$author$name,
committer=oneCommitRecord$commit$committer$name,
commitDate=oneCommitRecord$commit$committer$date,
sha=oneCommitRecord$sha,
stringsAsFactors = F
)
return(df_commit)
}
commit_df_fun
library(purrr)
map_dfr(commitHistory,commit_df_fun) -> df_allCommits
df_allCommits
df_allCommits$samePerson <- author==committer
df_commit <- data.frame(
author=oneCommitRecord$commit$author$name,
committer=oneCommitRecord$commit$committer$name,
commitDate=oneCommitRecord$commit$committer$date,
sha=oneCommitRecord$sha,
stringsAsFactors = F
)
View(df_commit)
View(df_commit)
df_allCommits$samePerson <- df_commit$author==df_allCommits$committer
df_allCommits$samePerson
df_validCommits <- df_allCommits[df_allCommits$samePerson]
df_validCommits <- df_allCommits[[df_allCommits$samePerson]]
View(df_allCommits)
df_validCommits <- df_allCommits[,df_allCommits$samePerson]
View(df_allCommits)
df_validCommits <- df_allCommits[df_allCommits$samePerson,]
df_validCommits
View(df_validCommits)
View(df_validCommits)
df_validCommits$commitDate <- ymd_hms(df_validCommits$commitDate)
df_validCommits$commitDate <- with_tz(df_validCommits$commitDate,tzone="Asia/Taipei")
df_validCommits$commitDate
df_validCommits$hh <- hour(df_validCommits$commitDate)
df_validCommits$hh
df_validCommits$hh <- hour(df_validCommits$commitDate)
df_validCommits$hh
class(df_validCommits$commitDate)
df_validCommits$hh <- hour(df_validCommits$commitDate)
class(df_validCommits$hh)
df_validCommits$hh
YYYY <- year(df_validCommits$commitDate)
MM <- month(df_validCommits$commitDate)
DD <- day(df_validCommits$commitDate)
df_validCommits$date <- ymd(str_c(YYYY,MM,DD,sep="-"))
df_validCommits$date
commitHistory[[1]][["sha"]]
lubridate::wday()
?lubridate::wday()
lubridate::wday(df_validCommits$commitDate)
df_validCommits$weekday
df_validCommits$weekday <- lubridate::wday(df_validCommits$commitDate)
df_validCommits$weekday
df_validCommits$validCommit <- df_validCommits$weekday==c(1:3) & df_validCommits$hh==c(12:23)
df_validCommits$validCommit
df_validCommits$validCommit <- df_validCommits$weekday==c(1:3) & df_validCommits$hh==c(12:23)
df_validCommits$validCommit
df_validCommits$validCommit <- df_validCommits$weekday==c(1:3) & df_validCommits$hh==c(12:23)
df_validCommits$validCommit
df_validCommits$weekday <- lubridate::wday(df_validCommits$commitDate)
df_validCommits$weekday
df_validCommits$validCommit <- df_validCommits$weekday==c(1:3) & df_validCommits$hh==c(12:23)
df_validCommits$validCommit
df_validCommits$validCommit <- df_validCommits$weekday==c(2:4) & df_validCommits$hh==c(12:23)
df_validCommits$validCommit
df_validCommits$validCommit <- (df_validCommits$weekday %in% c(2:4) & df_validCommits$hh >=12 & df_validCommits$hh <=23)
df_validCommits$validCommit
df_validCommits$validCommit <- (df_validCommits$weekday %in% c(2:4) & df_validCommits$hh %in% c(12:23))
df_validCommits$validCommit
df_validCommitsSubsample <- df_validCommits[df_validCommits$validCommit,]
df_validCommitsSubsample
View(df_validCommitsSubsample)
View(df_validCommitsSubsample)
length(df_validCommits$date)
validCounts
View(df_validCommits)
length(df_validCommits$date)
nrow(df_validCommits$date)
validCounts
View(df_validCommitsSubsample)
length(df_validCommitsSubsample)
validCounts
View(df_validCommitsSubsample)
View(df_validCommitsSubsample)
validCounts <- df_validCommitsSubsample$date != df_validCommitsSubsample
validCounts <- df_validCommitsSubsample$date != df_validCommitsSubsample$date
validCounts <- sum(validCounts)
validCounts <- df_validCommitsSubsample$date != df_validCommitsSubsample$date
validCounts <- sum(validCounts)
validCounts
validCounts <- df_validCommitsSubsample$date != df_validCommitsSubsample$date
validCounts
unique(df_validCommitsSubsample[,c("date")]) -> unique_df
length(unique_df) -> validCounts
validCounts
df_validCommits$date <- date(df_validCommits$commitDate)
# df_validCommits$date
df_validCommits$date <- date(df_validCommits$commitDate)
df_validCommits$date
load(url("https://www.dropbox.com/s/qnz9paigf61yjus/commitHistory.Rda?raw=1"))
View(commitHistory)
for (i in seq_along(commitHistory)) {
print(commitHistory[[i]]$author)
}
for (i in seq_along(commitHistory)) {
print(commitHistory[[i]]$author)
}
for (i in seq_along(commitHistory)) {
print(commitHistory[[i]]$commit$author$name)
}
for (i in seq_along(commitHistory)) {
str_c(
"Arthor is ",
print(commitHistory[[i]]$commit$author$name),
". Committer is ",
print(commitHistory[[i]]$commit$committer$name),
". Date is ",
print(commitHistory[[i]]$commit$committer$date)
)
}
for (i in seq_along(commitHistory)) {
print(str_c(
"Arthor is ",
print(commitHistory[[i]]$commit$author$name),
". Committer is ",
print(commitHistory[[i]]$commit$committer$name),
". Date is ",
print(commitHistory[[i]]$commit$committer$date)
))
}
for (i in seq_along(commitHistory)) {
print(str_c(
"Arthor is ",
commitHistory[[i]]$commit$author$name,
". Committer is ",
commitHistory[[i]]$commit$committer$name,
". Date is ",
commitHistory[[i]]$commit$committer$date
))
}
for (i in seq_along(commitHistory)) {
print(
str_c(
"Arthor is ",
commitHistory[[i]]$commit$author$name,
". Committer is ",
commitHistory[[i]]$commit$committer$name,
". Date is ",
commitHistory[[i]]$commit$committer$date
)
)
}
for (i in seq_along(commitHistory)) {
logi <- commitHistory[[i]]$commit$author$name==commitHistory[[i]]$commit$committer$name
print(logi)
}
